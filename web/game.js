/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI45340 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3648 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI14009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45009 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI45008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI45005 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI45002 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI45021 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NNI45005 = {kind: 1, offset: "value", len: 0, typ: NTI138, name: "value", sons: null};
NTI45005.node = NNI45005;
NTI45002.base = NTI45005;
NTI45021.base = NTI45002;
NTI45009.base = NTI45002;
var NNI45008 = {kind: 1, offset: "words", len: 0, typ: NTI45009, name: "words", sons: null};
NTI45008.node = NNI45008;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI45008.base = NTI3608;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
NTI3626.base = NTI3608;
NTI3650.base = NTI3626;
var NNI14009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI14009.node = NNI14009;
var NNI3656 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3656.node = NNI3656;
NTI3656.base = NTI3626;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
var NNI3640 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3640.node = NNI3640;
NTI3640.base = NTI3626;
NTI3644.base = NTI3640;
var NNI3648 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3648.node = NNI3648;
NTI3648.base = NTI3626;
NTI45340.base = NTI45002;

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20664, value_20665, typ_20666) {
		      var result = new Array(len_20664);
      for (var i = 0; i < len_20664; ++i) result[i] = nimCopy(null, value_20665, typ_20666);
      return result;
    

	
}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}
		
		e_14406.trace = nimCopy(null, rawWriteStackTrace_14228(), NTI138);
		throw e_14406;

	
}

function chckIndx(i_20803, a_20804, b_20805) {
			var Tmp1;

	var result_20806 = 0;

	BeforeRet: do {
			if (!(a_20804 <= i_20803)) Tmp1 = false; else {				Tmp1 = (i_20803 <= b_20805);			}		if (Tmp1) {
		result_20806 = i_20803;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20806;

}

function addInt(a_17803, b_17804) {
		      var result = a_17803 + b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var ConstSet2 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet3 = setConstr(32, 9, 11, 13, 10, 12);

function subInt(a_18003, b_18004) {
		      var result = a_18003 - b_18004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}

function newInterpreter_45019(words_45022) {
	var result_45023 = null;

	var F={procname:"interpreter.newInterpreter",prev:framePtr,filename:"interpreter.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 12;
		result_45023 = {words: nimCopy(null, words_45022, NTI45021), m_type: NTI45008};
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_45023;

}

function newWord_45025(value_45027) {
	var result_45028 = null;

	var F={procname:"interpreter.newWord",prev:framePtr,filename:"interpreter.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 15;
		result_45028 = {value: nimCopy(null, value_45027, NTI138)};
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_45028;

}
var inpt_46013 = [newInterpreter_45019([newWord_45025(makeNimstrLit("go"))])];

function parseInput(input_46016) {
	var result_46017 = null;

	var F={procname:"main.parseInput",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 6;
		result_46017 = toJSStr(parse_45321(inpt_46013[0], cstrToNimstr(input_46016)));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_46017;

}

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0
      

	
}

function auxWriteStackTrace_14004(f_14006) {
					var Tmp3;

	var result_14007 = [null];

		var it_14015 = f_14006;
		var i_14016 = 0;
		var total_14017 = 0;
		var tempFrames_14021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI14009);
		L1: do {
				L2: while (true) {
					if (!!((it_14015 == null))) Tmp3 = false; else {						Tmp3 = (i_14016 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_14021[i_14016].Field0 = it_14015.procname;
					tempFrames_14021[i_14016].Field1 = it_14015.line;
					i_14016 += 1;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_14015 == null))) break L5;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		result_14007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_14017 == i_14016))) {
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_14007[0] = makeNimstrLit("(");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr(((total_14017 - i_14016))+"")); } else { result_14007[0] = cstrToNimstr(((total_14017 - i_14016))+"");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_14007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_14215 = 0;
			var colontmp__14221 = 0;
			colontmp__14221 = (i_14016 - 1);
			var res_14224 = colontmp__14221;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_14224)) break L8;
						j_14215 = res_14224;
						add_12029(result_14007, 0, tempFrames_14021[j_14215].Field0);
						if ((0 < tempFrames_14021[j_14215].Field1)) {
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_14007[0] = makeNimstrLit(", line: ");};
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_14021[j_14215].Field1)+"")); } else { result_14007[0] = cstrToNimstr((tempFrames_14021[j_14215].Field1)+"");};
						}
						
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_14007[0] = makeNimstrLit("\x0A");};
						res_14224 -= 1;
					}
			} while(false);
		} while(false);

	return result_14007[0];

}

function rawWriteStackTrace_14228() {
	var result_14230 = null;

		if (!((framePtr == null))) {
		result_14230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_14004(framePtr)), NTI138);
		}
		else {
			result_14230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_14230;

}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(rawWriteStackTrace_14228()); } else { buf_14254[0] = rawWriteStackTrace_14228();};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }
  

	
}

function get_45045(self_45050) {
	var result_45051 = null;

	var F={procname:"get.get",prev:framePtr,filename:"lib/option.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!(self_45050.isEmpty)) {
		F.line = 24;
		result_45051 = self_45050.value;
		break BeforeRet;
		}
		else {
			F.line = 26;
			F.line = 2810;
			var e_45057 = null;
			F.line = 2811;
			e_45057 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, up: null};
			F.line = 2812;
			e_45057.message = nimCopy(null, makeNimstrLit("Tried to get empty Option."), NTI138);
			F.line = 2813;
			e_45057.parent = null;
			raiseException(e_45057, "ValueError");
		}
		
	} while (false);
	framePtr = F.prev;

	return result_45051;

}

function get_45068(self_45050) {
	var result_45071 = null;

	var F={procname:"get.get",prev:framePtr,filename:"lib/option.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 22;
		result_45071 = get_45045(self_45050);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_45071;

}

function nonEmpty_45073(self_45078) {
	var result_45079 = false;

	var F={procname:"nonEmpty.nonEmpty",prev:framePtr,filename:"lib/option.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 29;
		result_45079 = !(self_45078.isEmpty);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_45079;

}

function nonEmpty_45081(self_45078) {
	var result_45084 = false;

	var F={procname:"nonEmpty.nonEmpty",prev:framePtr,filename:"lib/option.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 28;
		result_45084 = nonEmpty_45073(self_45078);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_45084;

}

function foreach_45086(self_45091, f_45096) {
	var F={procname:"foreach.foreach",prev:framePtr,filename:"lib/option.nim",line:0};
	framePtr = F;
		if (nonEmpty_45081(self_45091)) {
		F.line = 42;
		f_45096(get_45068(self_45091));
		}
		
	framePtr = F.prev;

	
}

function foreach_45112(self_45091, f_45096) {
	var F={procname:"foreach.foreach",prev:framePtr,filename:"lib/option.nim",line:0};
	framePtr = F;
		F.line = 40;
		foreach_45086(self_45091, f_45096);
	framePtr = F.prev;

	
}

function raiseIndexError() {
		var e_14894 = null;
		e_14894 = {m_type: NTI3656, parent: null, name: null, message: null, trace: null, up: null};
		e_14894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14894.parent = null;
		raiseException(e_14894, "IndexError");

	
}

function None_45222() {
	var result_45261 = null;

	var F={procname:"None.None",prev:framePtr,filename:"lib/option.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 7;
		result_45261 = {isEmpty: true, value: null};
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_45261;

}

function Some_45204(value_45208) {
	var result_45210 = null;

	var F={procname:"Some.Some",prev:framePtr,filename:"lib/option.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((value_45208 === null))) {
		F.line = 15;
		result_45210 = {value: value_45208, isEmpty: false};
		break BeforeRet;
		}
		else {
			F.line = 17;
			result_45210 = None_45222();
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_45210;

}

function raiseOverflow() {
		var e_14840 = null;
		e_14840 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		e_14840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14840.parent = null;
		raiseException(e_14840, "OverflowError");

	
}

function sysFatal_23221(message_23227) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_23229 = null;
		F.line = 2831;
		e_23229 = {m_type: NTI3648, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_23229.message = nimCopy(null, message_23227, NTI138);
		F.line = 2833;
		raiseException(e_23229, "AssertionError");
	framePtr = F.prev;

	
}

function raiseAssert_23216(msg_23218) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 3771;
		sysFatal_23221(msg_23218);
	framePtr = F.prev;

	
}

function failedAssertImpl_23239(msg_23241) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 3778;
		raiseAssert_23216(msg_23241);
	framePtr = F.prev;

	
}

function wordForToken_45030(self_45032, token_45033) {
	var result_45114 = null;

	var F={procname:"interpreter.wordForToken",prev:framePtr,filename:"interpreter.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 18;
			var word_45202 = null;
			F.line = 3803;
			var colontmp__45308 = null;
			F.line = 18;
			colontmp__45308 = self_45032.words;
			F.line = 3805;
			var i_45311 = 0;
			F.line = 3806;
			var L_45313 = (colontmp__45308 != null ? colontmp__45308.length : 0);
			L2: do {
				F.line = 3807;
					L3: while (true) {
					if (!(i_45311 < L_45313)) break L3;
						F.line = 3808;
						word_45202 = colontmp__45308[chckIndx(i_45311, 0, colontmp__45308.length+0-1)-0];
						if (eqStrings(word_45202.value, token_45033)) {
						F.line = 20;
						result_45114 = Some_45204(word_45202);
						break BeforeRet;
						}
						
						F.line = 3809;
						i_45311 = addInt(i_45311, 1);
						if (!(((colontmp__45308 != null ? colontmp__45308.length : 0) == L_45313))) {
						F.line = 3810;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 21;
		result_45114 = None_45222();
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_45114;

}

function wordForToken_45116(self_45032, token_45033) {
	var result_45119 = null;

	var F={procname:"interpreter.wordForToken",prev:framePtr,filename:"interpreter.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 17;
		result_45119 = wordForToken_45030(self_45032, token_45033);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_45119;

}

function parse_45315(self_45317, input_45318) {

						function colonanonymous__45343(w_45345) {
							var F={procname:"parse.:anonymous",prev:framePtr,filename:"interpreter.nim",line:0};
							framePtr = F;
								F.line = 26;
								if (col_45341 != null) { col_45341.push(w_45345); } else { col_45341 = [w_45345]; };
							framePtr = F.prev;

							
						}

	var result_45319 = null;

	var F={procname:"interpreter.parse",prev:framePtr,filename:"interpreter.nim",line:0};
	framePtr = F;
		F.line = 24;
		var col_45341 = nimCopy(null, [], NTI45340);
		L1: do {
			F.line = 25;
			var token_45342 = null;
			F.line = 516;
			var last_45383 = 0;
			F.line = 517;
			var splits_45385 = -1;
			L2: do {
				F.line = 609;
					L3: while (true) {
					if (!(last_45383 < (input_45318 != null ? input_45318.length-1 : 0))) break L3;
						L4: do {
							F.line = 520;
								L5: while (true) {
								if (!(ConstSet2[input_45318[chckIndx(last_45383, 0, input_45318.length+0-1)-0]] != undefined)) break L5;
									F.line = 520;
									last_45383 = addInt(last_45383, 1);
								}
						} while(false);
						F.line = 521;
						var first_45387 = last_45383;
						L6: do {
							F.line = 522;
								L7: while (true) {
								if (!((last_45383 < (input_45318 != null ? input_45318.length-1 : 0)) && !((ConstSet3[input_45318[chckIndx(last_45383, 0, input_45318.length+0-1)-0]] != undefined)))) break L7;
									F.line = 522;
									last_45383 = addInt(last_45383, 1);
								}
						} while(false);
						if ((first_45387 <= subInt(last_45383, 1))) {
						if ((splits_45385 == 0)) {
						F.line = 524;
						last_45383 = (input_45318 != null ? input_45318.length-1 : 0);
						}
						
						F.line = 525;
						token_45342 = (input_45318.slice(first_45387, (subInt(last_45383, 1))+1).concat(0));
						F.line = 26;
						foreach_45112(wordForToken_45116(self_45317, token_45342), colonanonymous__45343);
						if ((splits_45385 == 0)) {
						F.line = 526;
						break L2;
						}
						
						F.line = 527;
						splits_45385 = subInt(splits_45385, 1);
						}
						
					}
			} while(false);
		} while(false);
		F.line = 27;
		result_45319 = nimCopy(null, makeNimstrLit(""), NTI138);
		L8: do {
			F.line = 28;
			var word_45376 = null;
			F.line = 3805;
			var i_45391 = 0;
			F.line = 3806;
			var L_45393 = (col_45341 != null ? col_45341.length : 0);
			L9: do {
				F.line = 3807;
					L10: while (true) {
					if (!(i_45391 < L_45393)) break L10;
						F.line = 3808;
						word_45376 = col_45341[chckIndx(i_45391, 0, col_45341.length+0-1)-0];
						F.line = 29;
						result_45319 = nimCopy(null, (result_45319.slice(0,-1)).concat(word_45376.value), NTI138);
						F.line = 3809;
						i_45391 = addInt(i_45391, 1);
						if (!(((col_45341 != null ? col_45341.length : 0) == L_45393))) {
						F.line = 3810;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_45319;

}

function parse_45321(self_45317, input_45318) {
	var result_45324 = null;

	var F={procname:"interpreter.parse",prev:framePtr,filename:"interpreter.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 23;
		result_45324 = parse_45315(self_45317, input_45318);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_45324;

}
